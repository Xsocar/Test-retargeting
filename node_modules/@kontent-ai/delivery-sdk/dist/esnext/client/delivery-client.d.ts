import { IDeliveryClientConfig } from '../config';
import { IContentItem } from '../models';
import { ElementQuery, ItemsFeedQuery, MultipleItemsQuery, MultipleTypeQuery, SingleItemQuery, SingleTypeQuery, TaxonomiesQuery, TaxonomyQuery, LanguagesQuery, InitializeSyncQuery, SyncChangesQuery } from '../query';
import { IMappingService } from '../services';
import { IDeliveryClient } from './idelivery-client.interface';
export declare class DeliveryClient implements IDeliveryClient {
    protected config: IDeliveryClientConfig;
    private queryService;
    mappingService: IMappingService;
    /**
     * Delivery client used to fetch data from Kontent.ai
     * @constructor
     * @param {IDeliveryClientConfig} config - The client configuration
     */
    constructor(config: IDeliveryClientConfig);
    /**
     * Gets query for multiple languages
     */
    languages(): LanguagesQuery;
    /**
     * Gets query for multiple types
     */
    types(): MultipleTypeQuery;
    /**
     * Gets query for single type
     * @param {string} typeCodename - Codename of the type to fetch
     */
    type(typeCodename: string): SingleTypeQuery;
    /**
     * Gets query for multiple items
     */
    items<TContentItem extends IContentItem = IContentItem>(): MultipleItemsQuery<TContentItem>;
    /**
     * Gets query for single item
     * @param {string} codename - Codename of item to fetch
     */
    item<TContentItem extends IContentItem = IContentItem>(codename: string): SingleItemQuery<TContentItem>;
    /**
     * Gets query for items feed. Executes single HTTP request only. Might not get all items from your Kontent.ai project.
     */
    itemsFeed<TContentItem extends IContentItem = IContentItem>(): ItemsFeedQuery<TContentItem>;
    /**
     * Gets query for single taxonomy
     * @param {string} codename - Codename of taxonomy to fetch
     */
    taxonomy(codename: string): TaxonomyQuery;
    /**
     * Gets query for multiple taxonomies
     */
    taxonomies(): TaxonomiesQuery;
    /**
     * Gets query for an element within a type
     * @param {string} typeCodename - Codename of the type
     * @param {string} elementCodename - Codename of the element
     */
    element(typeCodename: string, elementCodename: string): ElementQuery;
    /**
     * Gets query for initializing sync
     */
    initializeSync(): InitializeSyncQuery;
    /**
     * Gets query fetching delta updates of content items
     */
    syncChanges(): SyncChangesQuery;
}
