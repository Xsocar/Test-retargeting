import { Contracts } from '../contracts';
import { IDeliveryNetworkResponse } from './common/base-responses';
import { IKontentListAllResponse, IKontentListResponse, IKontentResponse } from './common/common-models';
import { IPagination } from './common/pagination.class';
import { IContentType } from './content-type-models';
import { IGenericElement } from './element-models';
import { IContentItem, IContentItemsContainer } from './item-models';
import { ILanguage } from './language-models';
import { IContentItemDelta } from './sync-models';
import { ITaxonomyGroup } from './taxonomy-models';
export declare namespace Responses {
    interface IListContentTypesResponse extends IKontentListResponse {
        items: IContentType[];
        pagination: IPagination;
    }
    interface IListContentTypesAllResponse extends IKontentListAllResponse {
        items: IContentType[];
        responses: IDeliveryNetworkResponse<IListContentTypesResponse, Contracts.IListContentTypeContract>[];
    }
    interface IViewContentTypeResponse extends IKontentResponse {
        type: IContentType;
    }
    interface IViewContentTypeElementResponse extends IKontentResponse {
        /**
         * Response containing content type element
         *
         * @constructor
         * @param {IGenericElement} element - Content type element
         */
        element: IGenericElement;
    }
    interface IListItemsFeedResponse<TContentItem extends IContentItem = IContentItem> extends IKontentListResponse {
        items: TContentItem[];
        linkedItems: IContentItemsContainer;
    }
    interface IListItemsFeedAllResponse<TContentItem extends IContentItem = IContentItem> extends IKontentListAllResponse {
        items: TContentItem[];
        responses: IDeliveryNetworkResponse<IListItemsFeedResponse<TContentItem>, Contracts.IItemsFeedContract>[];
    }
    interface IListContentItemsResponse<TContentItem extends IContentItem = IContentItem> extends IKontentListResponse {
        items: TContentItem[];
        pagination: IPagination;
        linkedItems: IContentItemsContainer;
    }
    interface IListContentItemsAllResponse<TContentItem extends IContentItem = IContentItem> extends IKontentListAllResponse {
        items: TContentItem[];
        responses: IDeliveryNetworkResponse<IListContentItemsResponse<TContentItem>, Contracts.IListContentItemsContract>[];
    }
    interface IViewContentItemResponse<TContentItem extends IContentItem = IContentItem> extends IKontentResponse {
        item: TContentItem;
        linkedItems: IContentItemsContainer;
    }
    interface IInitializeSyncResponse extends IKontentResponse {
        items: IContentItemDelta[];
    }
    interface ISyncChangesResponse extends IKontentResponse {
        items: IContentItemDelta[];
    }
    interface ISyncChangesAllResponse extends IKontentListAllResponse {
        items: IContentItemDelta[];
        responses: IDeliveryNetworkResponse<ISyncChangesResponse, Contracts.ISyncChangesContract>[];
    }
    interface IListLanguagesResponse extends IKontentListResponse {
        items: ILanguage[];
        pagination: IPagination;
    }
    interface IListLanguagesAllResponse extends IKontentListAllResponse {
        items: ILanguage[];
        responses: IDeliveryNetworkResponse<IListLanguagesResponse, Contracts.IListLanguagesContract>[];
    }
    interface IViewTaxonomyResponse extends IKontentResponse {
        taxonomy: ITaxonomyGroup;
    }
    interface IListTaxonomiesResponse extends IKontentListResponse {
        items: ITaxonomyGroup[];
        pagination: IPagination;
    }
    interface IListTaxonomiesAllResponse extends IKontentListAllResponse {
        items: ITaxonomyGroup[];
        responses: IDeliveryNetworkResponse<IListTaxonomiesResponse, Contracts.IListTaxonomyGroupsContract>[];
    }
}
